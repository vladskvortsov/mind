name: Deploy S3 and CloudFront
on: workflow_dispatch

jobs:
  create-sync-s3:
    runs-on: ubuntu-latest
    outputs:
      aws_bucket_name: ${{ steps.create_s3_bucket.outputs.aws_bucket_name }}  # Define job output
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 1: Create an S3 Bucket
      - name: Create S3 bucket if it doesn't exist
        id: create_s3_bucket
        run: |
          BUCKET_NAME="project1-frontend-production" # Unique bucket name
          aws s3api head-bucket --bucket "$BUCKET_NAME" || aws s3api create-bucket --bucket "$BUCKET_NAME" --region ${{ secrets.AWS_REGION }} --create-bucket-configuration LocationConstraint=${{ secrets.AWS_REGION }}
          echo "AWS_BUCKET_NAME=$BUCKET_NAME" >> $GITHUB_ENV
          echo "aws_bucket_name=$BUCKET_NAME" >> $GITHUB_OUTPUT



      # Step 2: Sync files to S3
      - name: Sync files to S3
        run: |
          aws s3 sync ./project1/frontend/ s3://$AWS_BUCKET_NAME --delete

          echo "${{ steps.create_s3_bucket.outputs.aws_bucket_name }}"


  create-cloudfront:
    runs-on: ubuntu-latest
    needs: create-sync-s3
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 1: Create CloudFront Origin Access Control
      - name: Check if CloudFront OAC exists
        id: check_oac
        run: |
          OAC_ID=$(aws cloudfront list-origin-access-controls \
            --query "OriginAccessControlList.Items[?Name=='S3OAC-production'].Id | [0]" \
            --output text)
          
          if [ "$OAC_ID" == "None" ]; then
            OAC_ID=""
          fi

          echo "OAC_ID=$OAC_ID" >> $GITHUB_ENV

      - name: Create CloudFront Origin Access Control (OAC) if it doesn't exist
        if: env.OAC_ID == ''
        id: create_oac
        run: |
          OAC_CONFIG=$(cat <<EOF
          {
            "Name": "S3OAC-production",
            "OriginAccessControlOriginType": "s3",
            "SigningProtocol": "sigv4",
            "SigningBehavior": "always",
            "Description": "OAC for CloudFront to access S3 bucket"
          }
          EOF
          )
          OAC_ID=$(aws cloudfront create-origin-access-control \
            --origin-access-control-config "$OAC_CONFIG" \
            --query "OriginAccessControl.Id" \
            --output text)
          echo "CLOUDFRONT_OAC_ID=$OAC_ID" >> $GITHUB_ENV

      # Step 2: Create CloudFront Distribution
      - name: Create CloudFront Distribution if not exists
        id: create_cloudfront
        run: |
          DISTRIBUTION_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?Origins.Items[?DomainName=='${{ needs.create-sync-s3.outputs.aws_bucket_name }}.s3.amazonaws.com']].Id" --output text)
          if [ -z "$DISTRIBUTION_ID" ]; then
            DISTRIBUTION_ID=$(aws cloudfront create-distribution \
              --origin-domain-name "${{ needs.create-sync-s3.outputs.aws_bucket_name }}.s3.amazonaws.com" \
              --default-root-object templates/index.html \
              --query "Distribution.Id" --output text \
              --origins Items[ \
                { \
                  "Id": "S3OAC-production", \
                  "DomainName": "${{ needs.create-sync-s3.outputs.aws_bucket_name }}.s3.amazonaws.com", \
                  "S3OriginConfig": { \
                    "OriginAccessControlId": "$CLOUDFRONT_OAC_ID" \
                  } \
                }])
          fi
          echo "AWS_DISTRIBUTION_ID=$DISTRIBUTION_ID" >> $GITHUB_ENV
          echo "${{ needs.create-sync-s3.outputs.aws_bucket_name }}"
      # Step 3: Set S3 bucket policy to allow CloudFront access
      - name: Set S3 bucket policy to allow CloudFront access
        run: |
          aws s3api put-bucket-policy --bucket "${{ needs.create-sync-s3.outputs.aws_bucket_name }}" --policy "$(cat <<EOF
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": "cloudfront.amazonaws.com"
                },
                "Action": "s3:GetObject",
                "Resource": "arn:aws:s3:::${{ needs.create-sync-s3.outputs.aws_bucket_name }}/*",
                "Condition": {
                  "StringEquals": {
                    "AWS:SourceArn": "arn:aws:cloudfront::$YOUR_AWS_ACCOUNT_ID:distribution/$AWS_DISTRIBUTION_ID"
                  }
                }
              }
            ]
          }
          EOF
          )"

      # Step 4: Invalidate CloudFront Cache
      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation --distribution-id $AWS_DISTRIBUTION_ID --paths "/*"

