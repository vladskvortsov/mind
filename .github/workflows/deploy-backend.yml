name: Deploy VPC, EC2, RDS, ElasticCache
on: 
  workflow_dispatch:
  # push:
  #   branches:
  #     - main
  #   paths:
  #     - 'project1/backend_redis/*'
  #     - 'project1/backend_rds/*'
jobs:
  deploy-vpc:
    runs-on: ubuntu-latest
    outputs: 
      vpc_id: ${{ steps.create_vpc.outputs.vpc_id }}
      public_subnet_id: ${{ steps.create_subnets.outputs.public_subnet_id }}
      private_subnet_id: ${{ steps.create_subnets.outputs.private_subnet_id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Create VPC
        id: create_vpc
        run: |
          VPC_ID=$(aws ec2 create-vpc --cidr-block 10.0.0.0/16 --query 'Vpc.VpcId' --output text)
          aws ec2 modify-vpc-attribute --vpc-id $VPC_ID --enable-dns-support
          aws ec2 modify-vpc-attribute --vpc-id $VPC_ID --enable-dns-hostnames
          echo "VPC_ID=$VPC_ID" >> $GITHUB_ENV
          echo "vpc_id=$VPC_ID" >> $GITHUB_OUTPUT


      - name: Create Subnets
        id: create_subnets
        run: |
          PUBLIC_SUBNET_ID=$(aws ec2 create-subnet --vpc-id ${{ steps.create_vpc.outputs.vpc_id }} --cidr-block 10.0.1.0/24 --query 'Subnet.SubnetId' --output text)
          PRIVATE_SUBNET_ID=$(aws ec2 create-subnet --vpc-id ${{ steps.create_vpc.outputs.vpc_id }} --cidr-block 10.0.2.0/24 --query 'Subnet.SubnetId' --output text)
          echo "PUBLIC_SUBNET_ID=$PUBLIC_SUBNET_ID" >> $GITHUB_ENV
          echo "PRIVATE_SUBNET_ID=$PRIVATE_SUBNET_ID" >> $GITHUB_ENV
          echo "public_subnet_id=$PUBLIC_SUBNET_ID" >> $GITHUB_OUTPUT
          echo "private_subnet_id=$PRIVATE_SUBNET_ID" >> $GITHUB_OUTPUT

      - name: Create Internet Gateway and Route Table
        id: create_igw
        run: |
          IGW_ID=$(aws ec2 create-internet-gateway --query 'InternetGateway.InternetGatewayId' --output text)
          aws ec2 attach-internet-gateway --vpc-id ${{ steps.create_vpc.outputs.vpc_id }} --internet-gateway-id $IGW_ID
          RT_ID=$(aws ec2 create-route-table --vpc-id ${{ steps.create_vpc.outputs.vpc_id }} --query 'RouteTable.RouteTableId' --output text)
          aws ec2 create-route --route-table-id $RT_ID --destination-cidr-block 0.0.0.0/0 --gateway-id $IGW_ID
          aws ec2 associate-route-table --subnet-id ${{ steps.create_subnets.outputs.public_subnet_id }} --route-table-id $RT_ID

      - name: Create Security Groups
        id: create_sg
        run: |
          ALB_SG_ID=$(aws ec2 create-security-group --group-name alb-sg --description "Security group for ALB" --vpc-id ${{ steps.create_vpc.outputs.vpc_id }} --query 'GroupId' --output text)
          aws ec2 authorize-security-group-ingress --group-id $ALB_SG_ID --protocol tcp --port 80 --cidr 0.0.0.0/0
          aws ec2 authorize-security-group-ingress --group-id $ALB_SG_ID --protocol tcp --port 443 --cidr 0.0.0.0/0
          ECS_SG_ID=$(aws ec2 create-security-group --group-name ecs-sg --description "Security group for ECS" --vpc-id ${{ steps.create_vpc.outputs.vpc_id }} --query 'GroupId' --output text)
          aws ec2 authorize-security-group-ingress --group-id $ECS_SG_ID --protocol tcp --port 80 --source-group $ALB_SG_ID
          echo "ecs_sg_id=$ECS_SG_ID" >> $GITHUB_OUTPUT
          echo "alb_sg_id=$ALB_SG_ID" >> $GITHUB_OUTPUT

          echo "${{ steps.create_vpc.outputs.vpc_id }}"
          echo "${{ steps.create_subnets.outputs.public_subnet_id }}"
          echo "${{ steps.create_subnets.outputs.private_subnet_id }}"


  # deploy-ecs:
  #   runs-on: ubuntu-latest
  # # needs: deploy-rds-backend-to-ecr
  #   steps:
  #   - name: Create ECS Cluster
  #     run: |
  #       aws ecs create-cluster --cluster-name backend-cluster

  #   # Step 5: Register ECS task definition
  #   - name: Render ECS Task Definition
  #     id: task-def
  #     uses: aws-actions/amazon-ecs-render-task-definition@v1
  #     with:
  #       task-definition: ./project1/backend_rds/ecs-task-definition.json  # Path to your ECS task definition JSON file
  #       container-name: backend-rds
  #       image: 194722414339.dkr.ecr.eu-north-1.amazonaws.com/project1-backend:backend-rds

  #   # Step 6: Deploy to ECS service

  #   - name: Deploy Amazon ECS task definition
  #     uses: aws-actions/amazon-ecs-deploy-task-definition@v2
  #     with:
  #       task-definition: ${{ steps.task-def.outputs.task-definition }}
  #       service: rds-backend
  #       cluster: backend-cluster
  #       wait-for-service-stability: true



